[
    {
        "tool_name": "list_delivery_agreement_details",
        "tool_code": "@TOOL\nasync def list_delivery_agreement_details(supplying_institution: str, institution_asking_for_goods: str):\n    \"\"\"\n    请列出配送协议中，指定供货机构和指定要货机构的所有协议详情\n        Args:\n            supplying_institution: 供货机构\n            institution_asking_for_goods: 要货机构\n    \"\"\"\n    sql = \"\"\"\n    SELECT\n    goods->>'name' AS 物品名称,\n    goods->>'purchase_unit_str' AS 采购单位,\n    goods->>'delivery_method_str' AS 配送方式,\n    (goods->>'agreement_unit_price_including_tax')::numeric AS 协议单价含税,\n    (goods->>'tax_rate')::numeric AS 税率\nFROM\n    agreement_product\nWHERE\n    agreement->>'type' = 'peisong'  -- 筛选配送协议\n    AND agreement->'supplying_organization'->>'name' = :supplying_institution  -- 供货机构条件\n    AND EXISTS (\n        SELECT 1\n        FROM jsonb_array_elements(agreement->'requesting_organizations') AS org\n        WHERE org->>'name' = :institution_asking_for_goods  -- 要货机构条件\n    )\n    \"\"\"\n    return {}\n",
        "tool_head": "list_delivery_agreement_details(supplying_institution: str, institution_asking_for_goods: str)\n    请列出配送协议中，指定供货机构和指定要货机构的所有协议详情\n        Args:\n            supplying_institution: 供货机构\n            institution_asking_for_goods: 要货机构\n    "
    },
    {
        "tool_name": "export_delivery_request_form",
        "tool_code": "@TOOL\nasync def export_delivery_request_form(institution_asking_for_goods: str, start_time: str, end_time: str):\n    \"\"\"\n    请帮我导出指定要货机构所有配送申请单\n        Args:\n            institution_asking_for_goods: 要货机构\n            start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    \"\"\"\n    sql = \"\"\"\n    SELECT *\nFROM delivery_application\nWHERE\n    (requesting_organization ->> 'name') = :institution_asking_for_goods\n    AND order_date BETWEEN :start_time AND :end_time\n    \"\"\"\n    return {}\n",
        "tool_head": "export_delivery_request_form(institution_asking_for_goods: str, start_time: str, end_time: str)\n    请帮我导出指定要货机构所有配送申请单\n        Args:\n            institution_asking_for_goods: 要货机构\n            start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    "
    },
    {
        "tool_name": "export_the_pending_shipping_request_form",
        "tool_code": "@TOOL\nasync def export_the_pending_shipping_request_form(payment_status:str,start_time: str, end_time: str):\n    \"\"\"\n    请帮我导出指定时间范围内指定支付状态所有的配送申请单\n        Args:\n            payment_status: 支付状态 格式：  待付款 已付款 已取消 已退款\n            start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    \"\"\"\n    sql = \"\"\"\n    SELECT *\nFROM delivery_application\nWHERE\n    payment_status = :payment_status\n    AND order_date BETWEEN :start_time AND :end_time\n    \"\"\"\n    return {}\n",
        "tool_head": "export_the_pending_shipping_request_form(payment_status: str, start_time: str, end_time: str)\n    请帮我导出指定时间范围内指定支付状态所有的配送申请单\n        Args:\n            payment_status: 支付状态 格式：  待付款 已付款 已取消 已退款\n            start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    "
    },
    {
        "tool_name": "export_uninvoiced_shipping_request_form",
        "tool_code": "@TOOL\nasync def export_uninvoiced_shipping_request_form(invoice_status:str,start_time: str, end_time: str):\n    \"\"\"\n    请帮我导出指定时间范围内所有指定开票状态的配送申请单\n        Args:\n            invoice_status: 开票状态 格式： 已开票 未开票\n            start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    \"\"\"\n    sql = \"\"\"\n    SELECT *\nFROM delivery_application\nWHERE\n    (data ->> 'kaipiaozhuangtai') = :invoice_status\n    AND (data ->> 'order_date')::date BETWEEN :start_time AND :end_time\n    \"\"\"\n    return {}\n",
        "tool_head": "export_uninvoiced_shipping_request_form(invoice_status: str, start_time: str, end_time: str)\n    请帮我导出指定时间范围内所有指定开票状态的配送申请单\n        Args:\n            invoice_status: 开票状态 格式： 已开票 未开票\n            start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    "
    },
    {
        "tool_name": "statistical_delivery_application_form",
        "tool_code": "@TOOL\nasync def statistical_delivery_application_form(supplying_institution: str, start_time: str, end_time: str):\n    \"\"\"\n    请帮我统计指定供货机构在指定时间范围内所有配送申请单的总销售金额及订单总数\n        Args:\n            supplying_institution: 供货机构\n            start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    \"\"\"\n    sql = \"\"\"\n    SELECT\n    SUM(amount_including_tax) AS 总销售金额,\n    COUNT(*) AS 订单总数\nFROM\n    delivery_application\nWHERE\n    supplying_organization->>'name' = :supplying_institution\n    AND order_date BETWEEN :start_time AND :end_time\n    \"\"\"\n    return {}\n",
        "tool_head": "statistical_delivery_application_form(supplying_institution: str, start_time: str, end_time: str)\n    请帮我统计指定供货机构在指定时间范围内所有配送申请单的总销售金额及订单总数\n        Args:\n            supplying_institution: 供货机构\n            start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    "
    },
    {
        "tool_name": "export_the_delivery_order_to_be_divided",
        "tool_code": "@TOOL\nasync def export_the_delivery_order_to_be_divided(status:str,start_time: str, end_time: str):\n    \"\"\"\n    请帮我导出指定时间范围内所有待分仓的配送订单\n        Args:\n            document_status: 状态 格式： 待分仓 已分仓\n            start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    \"\"\"\n    sql = \"\"\"\n    SELECT *\nFROM delivery_order\nWHERE\n    document_status = :status\n    AND (delivery_application->>'order_date')::date BETWEEN :start_time AND :end_time\n    \"\"\"\n    return {}\n",
        "tool_head": "export_the_delivery_order_to_be_divided(status: str, start_time: str, end_time: str)\n    请帮我导出指定时间范围内所有待分仓的配送订单\n        Args:\n            document_status: 状态 格式： 待分仓 已分仓\n            start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    "
    },
    {
        "tool_name": "export_delivery_orders",
        "tool_code": "@TOOL\nasync def export_delivery_orders(start_time: str, end_time: str):\n    \"\"\"\n    请帮我导出指定时间范围内的发货单\n        Args:\n           start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    \"\"\"\n    sql = \"\"\"\nSELECT\n    code AS 单据号,\n    delivery_order->'supplying_organization'->>'name' AS 供货机构,\n    delivery_order->'requesting_organization'->>'name' AS 要货机构,\n    shipping_warehouse->>'name' AS 发货仓库,\n    delivery_order->'delivery_application'->>'code' AS 来源配送申请单,\n    shipped_amount_with_tax AS 已发货金额,\n    document_status AS 单据状态,\n    delivery_order->>'order_date' AS 订单日期,\n    shipment_date AS 发货日期,\n    note AS 备注,\n    logistics_number AS 物流单号\nFROM\n    delivery_waybill\nWHERE\n    shipment_date BETWEEN :start_time AND :end_time\n    \"\"\"\n    return {}\n",
        "tool_head": "export_delivery_orders(start_time: str, end_time: str)\n    请帮我导出指定时间范围内的发货单\n        Args:\n           start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    "
    },
    {
        "tool_name": "export_price_adjustment_records",
        "tool_code": "@TOOL\nasync def export_price_adjustment_records(supplying_institution: str, start_time: str, end_time: str):\n    \"\"\"\n    请基于配送调价单，帮我整理出指定供货机构在指定时间范围类所有的调价记录\n        Args:\n            supplying_institution: 供货机构\n            start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    \"\"\"\n    sql = \"\"\"\nSELECT\n    调价日期,\n    协议名称,\n    物品名称,\n    采购单位,\n    调价类型,\n    调整前单价,\n    调整后单价\nFROM (\n    SELECT\n        version::date AS 调价日期,\n        agreement->>'name' AS 协议名称,\n        item->>'name' AS 物品名称,\n        item->>'purchase_unit_str' AS 采购单位,\n        agreement->>'agreement_type' AS 调价类型,\n        (item->>'agreement_unit_price_including_tax')::numeric AS 调整后单价,\n        LAG((item->>'agreement_unit_price_including_tax')::numeric)\n            OVER (PARTITION BY agreement->>'mgo_id', item->>'mgo_id'\n                  ORDER BY version::date) AS 调整前单价\n    FROM\n        agreement_history,\n        JSONB_ARRAY_ELEMENTS(agreement->'items') AS item\n    WHERE\n        agreement->'supplying_organization'->>'name' = :supplying_institution\n        AND agreement->>'agreement_type' = 'peisong'\n        AND version::date BETWEEN :start_time AND :end_time\n) AS price_changes\nWHERE\n    调整前单价 IS NOT NULL\n    AND 调整前单价 <> 调整后单价\n    \"\"\"\n    return {}\n",
        "tool_head": "export_price_adjustment_records(supplying_institution: str, start_time: str, end_time: str)\n    请基于配送调价单，帮我整理出指定供货机构在指定时间范围类所有的调价记录\n        Args:\n            supplying_institution: 供货机构\n            start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    "
    },
    {
        "tool_name": "query_sales_performance",
        "tool_code": "@TOOL\nasync def query_sales_performance(institution: str, start_time: str, end_time: str):\n    \"\"\"\n    查询指定机构在指定时间范围内的销售业绩总利润\n        Args:\n            institution: 机构名称\n            start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    \"\"\"\n    sql = \"\"\"\nSELECT SUM(sales_commission) AS 总利润\nFROM sales_data\nWHERE\n    -- 假设【总经理：蔡涛】属于上级机构字段\n    upper_level_organization->>'name' = :institution\n    -- 2月份时间范围（以2023年为例）\n    AND order_date >= :start_time\n    AND order_date < :end_time\n    \"\"\"\n\n    return {}\n",
        "tool_head": "query_sales_performance(institution: str, start_time: str, end_time: str)\n    查询指定机构在指定时间范围内的销售业绩总利润\n        Args:\n            institution: 机构名称\n            start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    "
    },
    {
        "tool_name": "list_inventory_details",
        "tool_code": "@TOOL\nasync def list_inventory_details(item_name: str, institution: str):\n    \"\"\"\n    列出指定物品在指定机构中的库存情况\n        Args:\n            item_name: 物品名称\n            institution: 机构名称\n    \"\"\"\n    sql = \"\"\"\nSELECT\n    warehouse->>'name' AS 仓库名称,\n    goods->>'initial_quantity' AS 可用量,\n    goods->>'current_stock_quantity' AS 当前库存,\n    goods->>'inventory_unit_str' AS 库存单位,\n    goods->>'specification_model' AS 规格型号\nFROM warehouse_goods\nWHERE\n    goods->>'name' = :item_name AND\n    warehouse->'organization'->>'name' = :institution\n    \"\"\"\n    return {}\n",
        "tool_head": "list_inventory_details(item_name: str, institution: str)\n    列出指定物品在指定机构中的库存情况\n        Args:\n            item_name: 物品名称\n            institution: 机构名称\n    "
    },
    {
        "tool_name": "summarize_inventory_movements",
        "tool_code": "@TOOL\nasync def summarize_inventory_movements(item_name: str, institution: str, start_time: str, end_time: str):\n    \"\"\"\n    列出指定物品在指定机构中时间范围内所有出入库类型的汇总\n        Args:\n            item_name: 物品名称\n            institution: 机构名称\n            start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    \"\"\"\n    return {\"错误\":\"目前不支持此查询\"}\n",
        "tool_head": "summarize_inventory_movements(item_name: str, institution: str, start_time: str, end_time: str)\n    列出指定物品在指定机构中时间范围内所有出入库类型的汇总\n        Args:\n            item_name: 物品名称\n            institution: 机构名称\n            start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    "
    },
    {
        "tool_name": "list_inventory_adjustments",
        "tool_code": "@TOOL\nasync def list_inventory_adjustments(institution: str, start_time: str, end_time: str):\n    \"\"\"\n    列出指定机构时间范围内的盈亏盘点情况\n        Args:\n            institution: 机构名称\n            start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    \"\"\"\n    sql = \"\"\"\n    SELECT\n    goods->>'name' AS 物品名称,\n    goods->>'specification_model' AS 规格型号,\n    goods->>'inventory_check_unit_str' AS 库存单位,\n    warehouse->>'name' AS 仓库,\n    inventory_check_time::date AS 盘点日期,\n    (goods->>'face_quantity')::numeric AS 账面数量,\n    (goods->>'face_amount')::numeric AS 账面金额,\n    (goods->>'trading_quantity')::numeric AS 实盘数量,\n    (goods->>'trading_amount')::numeric AS 实盘金额,\n    (goods->>'balance_quantity')::numeric AS 盈亏数量,\n    (goods->>'balance_amount')::numeric AS 盈亏金额\nFROM\n    inventory_check_items\nWHERE\n    organization->>'name' = :institution\n    AND inventory_check_time BETWEEN :start_time AND :end_time\n    \"\"\"\n    return {}\n",
        "tool_head": "list_inventory_adjustments(institution: str, start_time: str, end_time: str)\n    列出指定机构时间范围内的盈亏盘点情况\n        Args:\n            institution: 机构名称\n            start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    "
    },
    {
        "tool_name": "summarize_purchase_receipts",
        "tool_code": "@TOOL\nasync def summarize_purchase_receipts(item_name: str, institution: str, start_time: str, end_time: str):\n    \"\"\"\n    统计指定物品在指定机构中时间范围内所有采购入库记录\n        Args:\n            item_name: 物品名称\n            institution: 机构名称\n            start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    \"\"\"\n    sql = \"\"\"\n    SELECT\n    goods->>'name' AS 物品名称,\n    goods->>'specification_model' AS 规格型号,\n    date AS 入库日期,\n    warehouse->>'name' AS 入库仓库,\n    amount AS 入库金额,\n    quantity AS 入库数量,\n    goods->>'purchase_unit_str' AS 采购单位\nFROM\n    item_storage_entry\nWHERE\n    goods->>'name' = :item_name\n    AND warehouse->'organization'->>'name' = :institution\n    AND type = '采购入库'\n    AND date BETWEEN :start_time AND :end_time\n    \"\"\"\n    return {}\n",
        "tool_head": "summarize_purchase_receipts(item_name: str, institution: str, start_time: str, end_time: str)\n    统计指定物品在指定机构中时间范围内所有采购入库记录\n        Args:\n            item_name: 物品名称\n            institution: 机构名称\n            start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    "
    },
    {
        "tool_name": "summarize_shipment_outgoing",
        "tool_code": "@TOOL\nasync def summarize_shipment_outgoing(item_name: str, institution: str, start_time: str, end_time: str):\n    \"\"\"\n    统计指定物品在指定机构中时间范围内所有发货出库记录\n        Args:\n            item_name: 物品名称\n            institution: 机构名称\n            start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    \"\"\"\n    sql = \"\"\"\n    SELECT\n    goods->>'name' AS 物品名称,\n    goods->>'specification_model' AS 规格型号,\n    date::date AS 出库日期,\n    warehouse->>'name' AS 出库仓库,\n    quantity AS 出库数量,\n    amount AS 出库金额,\n    goods->>'inventory_unit_str' AS 单位\nFROM\n    item_storage_entry\nWHERE\n    goods->>'name' = :item_name\n    AND warehouse->'organization'->>'name' = :institution\n    AND type = '发货出库'\n    AND date BETWEEN :start_time AND :end_time\nORDER BY\n    date;\n    \"\"\"\n    return {}\n",
        "tool_head": "summarize_shipment_outgoing(item_name: str, institution: str, start_time: str, end_time: str)\n    统计指定物品在指定机构中时间范围内所有发货出库记录\n        Args:\n            item_name: 物品名称\n            institution: 机构名称\n            start_time: 开始时间 格式 2024-01-01\n            end_time: 结束时间 格式 2024-01-01\n    "
    },
    {
        "tool_name": "purchase_agreement_details",
        "tool_code": "@TOOL\nasync def purchase_agreement_details(supplier: str):\n    \"\"\"\n    列出采购协议中，指定供应商的所有协议明细\n    Args:\n        supplier: 供应商名称\n    \"\"\"\n    sql = \"\"\"\nSELECT\n    agreement ->> 'name' AS 协议名称,\n    goods ->> 'name' AS 物品名称,\n    goods ->> 'specification_model' AS 规格型号,\n    agreement ->> 'supplying_organization_str' AS 供应商,\n    COALESCE(\n        (SELECT string_agg(org ->> 'name', '，')\n         FROM jsonb_array_elements(agreement -> 'requesting_organizations') AS org),\n        '无'\n    ) AS 要货机构,\n    goods ->> 'purchase_unit_str' AS 采购单位,\n    goods ->> 'agreement_unit_price_including_tax' AS 协议单价,\n    goods ->> 'tax_rate' AS 税率,\n    COALESCE(goods ->> 'minimum_order_quantity', '无') AS 起订量,\n    goods ->> 'pricing_details' AS 单价浮动比例,\n    create_at AS 生效日期, -- 该字段在描述中未找到对应列\n    null AS 失效日期 -- 该字段在描述中未找到对应列\nFROM\n    agreement_product\nWHERE\n    agreement ->> 'supplying_organization_str' = :supplier;\n\"\"\"\n\n    pass\n",
        "tool_head": "purchase_agreement_details(supplier: str)\n    列出采购协议中，指定供应商的所有协议明细\n    Args:\n        supplier: 供应商名称\n    "
    },
    {
        "tool_name": "purchase_order_details",
        "tool_code": "@TOOL\nasync def purchase_order_details(supplier: str, purchase_organization: str, start_time: str, end_time: str):\n    \"\"\"\n    列出指定供应商、采购机构及时间范围内的所有采购订单明细\n    Args:\n        supplier: 供应商名称\n        purchase_organization: 采购机构名称\n        start_time: 开始时间 格式 2024-01-01\n        end_time: 结束时间 格式 2024-01-01\n    \"\"\"\n    sql = \"\"\"\nSELECT\n    po.code AS 订单编号,\n    po.purchasing_organization ->> 'name' AS 采购机构,\n    po.supplying_organization ->> 'name' AS 供应商,\n    po.receiving_institution ->> 'name' AS 收货机构,\n    po.order_date AS 订单日期,\n    item ->> 'name' AS 物品名称,\n    item ->> 'specification_model' AS 规格型号,\n    item ->> 'purchase_unit_str' AS 采购单位,\n    item ->> 'purchase_quantity' AS 采购数量,\n    COALESCE(po.receiving_date::text, '未收货') AS 收货日期,\n    item ->> 'already_received_quantity' AS 收货数量,\n    item ->> 'purchase_unit_price_including_tax' AS 采购单价,\n    item ->> 'purchase_amount_including_tax' AS 采购金额,\n    item ->> 'already_received_amount_including_tax' AS 收货金额,\n    item ->> 'tax_rate' AS 税率,\n    po.document_status AS 订单状态,\n    po.receiver_name AS 收货人,\n    po.receiver_phone AS 收货电话,\n    CONCAT(\n        po.receiver_address,\n        CASE WHEN po.doorplate_number <> '' THEN ' ' || po.doorplate_number ELSE '' END,\n        ' (地区：' || array_to_string(po.delivery_area, ' ') || ')'\n    ) AS \"详细地址\"\nFROM\n    purchase_order po,\n    LATERAL jsonb_array_elements(po.items) AS item\nWHERE\n    po.supplying_organization ->> 'name' = :supplier\n    AND po.purchasing_organization ->> 'name' = :purchase_organization\n    AND po.order_date BETWEEN :start_time AND :end_time\n    \"\"\"\n\n    pass\n",
        "tool_head": "purchase_order_details(supplier: str, purchase_organization: str, start_time: str, end_time: str)\n    列出指定供应商、采购机构及时间范围内的所有采购订单明细\n    Args:\n        supplier: 供应商名称\n        purchase_organization: 采购机构名称\n        start_time: 开始时间 格式 2024-01-01\n        end_time: 结束时间 格式 2024-01-01\n    "
    },
    {
        "tool_name": "purchase_receipt_details",
        "tool_code": "@TOOL\nasync def purchase_receipt_details(purchase_organization: str, start_time: str, end_time: str):\n    \"\"\"\n    列出指定采购机构及时间范围内的所有采购收货单\n    Args:\n        purchase_organization: 采购机构名称\n        start_time: 开始时间 格式 2024-01-01\n        end_time: 结束时间 格式 2024-01-01\n    \"\"\"\n    sql = f\"\"\"\nSELECT\n  receipt.code AS 收货单号,\n  receipt.supplying_organization->>'name' AS 供应商,\n  receipt.purchasing_organization_str AS 采购机构,\n  receipt.receiving_institution->>'name' AS 收货机构,\n  receipt.order_date::date AS 订单日期,\n  item->>'name' AS 物品名称,\n  item->>'specification_model' AS 规格型号,\n  item->>'purchase_unit_str' AS 采购单位,\n  (item->>'quantity')::numeric AS 采购数量,\n  (item->>'received_quantity')::numeric AS 收货数量,\n  (item->>'unit_price')::numeric AS 采购单价,\n  (item->>'amount')::numeric AS 收货金额,\n  (item->>'tax_rate')::numeric AS 税率,\n  receipt.document_status AS 订单状态\nFROM\n  purchase_receipt AS receipt,\n  jsonb_array_elements(receipt.items) AS item\nWHERE\n  receipt.purchasing_organization_str = :purchase_organization\n  AND receipt.order_date BETWEEN :start_time AND :end_time\n    \"\"\"\n    pass\n",
        "tool_head": "purchase_receipt_details(purchase_organization: str, start_time: str, end_time: str)\n    列出指定采购机构及时间范围内的所有采购收货单\n    Args:\n        purchase_organization: 采购机构名称\n        start_time: 开始时间 格式 2024-01-01\n        end_time: 结束时间 格式 2024-01-01\n    "
    },
    {
        "tool_name": "filter_refunded_purchase_receipts",
        "tool_code": "@TOOL\nasync def filter_refunded_purchase_receipts(start_time: str, end_time: str):\n    \"\"\"\n    筛选出指定时间范围内已经全部退款的采购收货单，并标识出对应的退货单号、退货金额、退货时间及提交人\n    Args:\n        start_time: 开始时间 格式 2024-01-01\n        end_time: 结束时间 格式 2024-01-01\n    \"\"\"\n    sql = \"\"\"\nSELECT\n    pr.mgo_id AS 采购收货单号,\n    pr.amount_including_tax AS 收货金额,\n    pro.items AS 退货单号,\n    pro.return_organization_str AS 退货机构,\n    pro.refund_amount_including_tax AS 退货金额,\n    pro.document_status AS 单据状态,\n    pro.return_date::date AS 退货日期,\n    (pro.submitter->'user'->>'name') AS 提交人\nFROM\n    purchase_receipt pr\nJOIN\n    purchase_return_order pro\nON\n    pr.mgo_id = (pro.purchase_receipt->'mgo_id')::uuid\nWHERE\n    pr.order_date >= :start_time\n    AND pr.order_date < :end_time\n    AND pr.amount_including_tax = (\n        SELECT SUM(amount_including_tax)\n        FROM purchase_return_order\n        WHERE purchase_receipt->'mgo_id' = pr.mgo_id::text\n    )\n        \"\"\"\n    pass\n",
        "tool_head": "filter_refunded_purchase_receipts(start_time: str, end_time: str)\n    筛选出指定时间范围内已经全部退款的采购收货单，并标识出对应的退货单号、退货金额、退货时间及提交人\n    Args:\n        start_time: 开始时间 格式 2024-01-01\n        end_time: 结束时间 格式 2024-01-01\n    "
    },
    {
        "tool_name": "price_adjustment_records",
        "tool_code": "@TOOL\nasync def price_adjustment_records(supplier: str, start_time: str, end_time: str):\n    \"\"\"\n    请基于采购调价单，整理出指定供应商在指定时间的所有调价记录\n    Args:\n        supplier: 供应商名称\n        start_time: 开始时间 格式 2024-01-01 00:00:00\n        end_time: 结束时间 格式 2024-12-31 23:59:59\n    \"\"\"\n    sql = \"\"\"\nSELECT\n  agreement->>'name' AS 协议名称,\n  item->>'name' AS 名称,\n  item->>'purchase_unit_str' AS 采购单位,\n  agreement->>'type' AS 类型,\n  item->>'agreement_unit_price_including_tax' AS 协议单价含税,\n  version AS 版本号,\n  operator->>'name' AS 操作人\nFROM\n  agreement_history,\n  LATERAL jsonb_array_elements(agreement->'items') AS item\nWHERE\n  agreement->'supplying_organization'->>'name' = :supplier\n  AND version BETWEEN :start_time AND :end_time\n        \"\"\"\n\n    result = await db_manager.pgsql().exec_sql_query(sql, {'supplier': supplier, 'start_time': start_time, 'end_time': end_time})\n\n    return result\n",
        "tool_head": "price_adjustment_records(supplier: str, start_time: str, end_time: str)\n    请基于采购调价单，整理出指定供应商在指定时间的所有调价记录\n    Args:\n        supplier: 供应商名称\n        start_time: 开始时间 格式 2024-01-01 00:00:00\n        end_time: 结束时间 格式 2024-12-31 23:59:59\n    "
    },
    {
        "tool_name": "filter_suppliers_by_category",
        "tool_code": "@TOOL\nasync def filter_suppliers_by_category(category: str):\n    \"\"\"\n    基于供应商管理，筛选出指定类别的供应商\n    Args:\n        category: 供应商类别（如 \"联营\"）\n    \"\"\"\n    sql = \"\"\"\n    SELECT\n    \"name\" AS 名称,\n    code AS 编码,\n    category AS 类别,\n    settlement_method_str AS 结算方式,\n    contact_person AS 联系人,\n    contact_phone AS 联系电话\nFROM organization\nWHERE\n    type = 'KS'\n    AND category = :category\n    \"\"\"\n    pass\n",
        "tool_head": "filter_suppliers_by_category(category: str)\n    基于供应商管理，筛选出指定类别的供应商\n    Args:\n        category: 供应商类别（如 \"联营\"）\n    "
    },
    {
        "tool_name": "filter_items_not_in_agreements",
        "tool_code": "@TOOL\nasync def filter_items_not_in_agreements():\n    \"\"\"\n    基于物品管理、配送协议、采购协议，筛选出未加入配送协议和采购协议的物品\n    Args:\n    \"\"\"\n    sql = \"\"\"\nSELECT\n    g.name AS 物品名称,\n    g.code AS 编码,\n    g.category_str AS 类别,\n    g.specification_model AS 规格型号,\n    g.statistical_type_str AS 统计类型,\n    g.inventory_unit_str AS 库存单位\nFROM\n    goods g\nLEFT JOIN\n    agreement_product ap\nON\n    g.mgo_id = ap.goods->>'mgo_id'\nWHERE\n    ap.mgo_id IS NULL\n\"\"\"\n    pass\n",
        "tool_head": "filter_items_not_in_agreements()\n    基于物品管理、配送协议、采购协议，筛选出未加入配送协议和采购协议的物品\n    Args:\n    "
    },
    {
        "tool_name": "filter_suppliers_without_valid_agreements",
        "tool_code": "@TOOL\nasync def filter_suppliers_without_valid_agreements():\n    \"\"\"\n    基于供应商管理、采购协议，筛选出未建立采购协议或者采购协议已过期的供应商列表\n    Args:\n    \"\"\"\n    sql = \"\"\"\nSELECT\n    o.name AS 名称,\n    o.code AS 编码,\n    o.category AS 类别,\n    o.settlement_method_str AS 结算方式,\n    o.contact_person AS 联系人,\n    o.contact_phone AS 联系电话\nFROM\n    organization o\nWHERE\n    NOT EXISTS (\n        SELECT 1\n        FROM agreement_product ap\n        WHERE\n            ap.agreement->'supplying_organization'->>'mgo_id' = o.mgo_id\n            AND (ap.agreement->>'activated')::BOOLEAN = TRUE\n    )\n\"\"\"\n    pass\n",
        "tool_head": "filter_suppliers_without_valid_agreements()\n    基于供应商管理、采购协议，筛选出未建立采购协议或者采购协议已过期的供应商列表\n    Args:\n    "
    },
    {
        "tool_name": "filter_duplicate_items_in_warehouses",
        "tool_code": "@TOOL\nasync def filter_duplicate_items_in_warehouses():\n    \"\"\"\n    筛选出指定机构中，存在同一个物品重复配置到多个仓库中的物品（需确保采购单位相同）\n    Args:\n    \"\"\"\n    sql = \"\"\"\nSELECT\n    org_name AS 机构名称,\n    goods_name AS 物品名称,\n    inventory_unit AS 库存单位,\n    purchase_unit AS 采购单位,\n    warehouse_name AS 仓库名称\nFROM (\n    SELECT\n        (warehouse->'organization'->>'name') AS org_name,\n        (goods->>'name') AS goods_name,\n        (goods->>'inventory_unit_str') AS inventory_unit,\n        (goods->>'purchase_unit_str') AS purchase_unit,\n        (warehouse->>'name') AS warehouse_name,\n        COUNT(*) OVER (PARTITION BY\n            (warehouse->'organization'->>'name'),\n            (goods->>'name'),\n            (goods->>'purchase_unit_str'),\n            (goods->>'inventory_unit_str')\n        ) AS cnt\n    FROM\n        warehouse_goods\n    WHERE\n        warehouse->'organization'->>'name' IS NOT NULL\n        AND goods->>'name' IS NOT NULL\n        AND goods->>'purchase_unit_str' IS NOT NULL\n) sub\nWHERE\n    cnt > 1\nORDER BY\n    org_name, goods_name, purchase_unit, inventory_unit, warehouse_name\n    \"\"\"\n    pass\n",
        "tool_head": "filter_duplicate_items_in_warehouses()\n    筛选出指定机构中，存在同一个物品重复配置到多个仓库中的物品（需确保采购单位相同）\n    Args:\n    "
    }
]